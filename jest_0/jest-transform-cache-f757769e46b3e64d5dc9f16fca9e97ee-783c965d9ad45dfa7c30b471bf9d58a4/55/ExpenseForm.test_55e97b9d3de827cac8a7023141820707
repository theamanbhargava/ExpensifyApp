'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');
var _ExpenseForm = require('../../components/ExpenseForm');var _ExpenseForm2 = _interopRequireDefault(_ExpenseForm);
var _expenses = require('../fixtures/expenses');var _expenses2 = _interopRequireDefault(_expenses);
var _moment = require('moment');var _moment2 = _interopRequireDefault(_moment);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

test('should render ExpenseForm correctly', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, null));
    expect(wrapper).toMatchSnapshot();
});

test('should render ExpenseForm correctly with expense data', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, { expense: _expenses2.default[1] }));
    expect(wrapper).toMatchSnapshot();
});

test('should render error for invalid form submission', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, null));
    wrapper.find('form').simulate('submit', {
        preventDefault: function preventDefault() {} });

    expect(wrapper.state('error').length).toBeGreaterThan(0);
    expect(wrapper).toMatchSnapshot();
});

test('should set description on input change', function () {
    var value = 'New Description';
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, null));
    wrapper.find('input').at(0).simulate('change', {
        target: { value: value } });

    expect(wrapper.state('description')).toBe(value);
});

test('should set note on textarea change', function () {
    var value = 'New note';
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, null));
    wrapper.find('textarea').simulate('change', {
        target: { value: value } });

    expect(wrapper.state('note')).toBe(value);
});

test('should set amount if valid value', function () {
    var value = "23.50";
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, null));
    wrapper.find('input').at(1).simulate('change', {
        target: { value: value } });

    expect(wrapper.state('amount')).toBe(value);
});

test('should not set amount if invalid value', function () {
    var value = "bkcd";
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, null));
    wrapper.find('input').at(1).simulate('change', {
        target: { value: value } });

    //should be am empty string since value is invalid
    expect(wrapper.state('amount')).toBe('');
});

test('should call onSubmit prop for valid form submission', function () {
    var onSubmitSpy = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, { expense: _expenses2.default[0], onSubmit: onSubmitSpy }));
    wrapper.find('form').simulate('submit', {
        preventDefault: function preventDefault() {} });

    expect(wrapper.state('error')).toBe('');
    //make sure id does not cause any error
    delete _expenses2.default[0].id;
    expect(onSubmitSpy).toHaveBeenLastCalledWith(_expenses2.default[0]);
});

test('should set new date on date change', function () {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_ExpenseForm2.default, null));
    wrapper.find('SingleDatePicker').prop('onDateChange');
});